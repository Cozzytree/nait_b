// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: db_table.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createColData = `-- name: CreateColData :one
INSERT INTO db_col_data (col_id, value)
VALUES ($1, $2) RETURNING id, col_id, value, created_at, updated_at
`

type CreateColDataParams struct {
	ColID uuid.UUID
	Value string
}

func (q *Queries) CreateColData(ctx context.Context, arg CreateColDataParams) (DbColDatum, error) {
	row := q.db.QueryRowContext(ctx, createColData, arg.ColID, arg.Value)
	var i DbColDatum
	err := row.Scan(
		&i.ID,
		&i.ColID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNewDBCol = `-- name: CreateNewDBCol :exec
INSERT INTO db_cols (table_id, name, data_type)
VALUES ($1, $2, $3)
`

type CreateNewDBColParams struct {
	TableID  uuid.UUID
	Name     string
	DataType Datatype
}

func (q *Queries) CreateNewDBCol(ctx context.Context, arg CreateNewDBColParams) error {
	_, err := q.db.ExecContext(ctx, createNewDBCol, arg.TableID, arg.Name, arg.DataType)
	return err
}

const createNewDBTable = `-- name: CreateNewDBTable :exec
INSERT INTO db_table (name, description, workspace_id, icon)
VALUES ($1, $2, $3, $4)
`

type CreateNewDBTableParams struct {
	Name        string
	Description string
	WorkspaceID uuid.UUID
	Icon        string
}

func (q *Queries) CreateNewDBTable(ctx context.Context, arg CreateNewDBTableParams) error {
	_, err := q.db.ExecContext(ctx, createNewDBTable,
		arg.Name,
		arg.Description,
		arg.WorkspaceID,
		arg.Icon,
	)
	return err
}

const getDBCols = `-- name: GetDBCols :many
SELECT id, table_id, name, data_type, created_at, updated_at FROM db_cols
WHERE table_id = $1
`

func (q *Queries) GetDBCols(ctx context.Context, tableID uuid.UUID) ([]DbCol, error) {
	rows, err := q.db.QueryContext(ctx, getDBCols, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DbCol
	for rows.Next() {
		var i DbCol
		if err := rows.Scan(
			&i.ID,
			&i.TableID,
			&i.Name,
			&i.DataType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDatabaseColData = `-- name: GetDatabaseColData :many
SELECT id, col_id, value, created_at, updated_at FROM db_col_data
WHERE col_id = $1
`

func (q *Queries) GetDatabaseColData(ctx context.Context, colID uuid.UUID) ([]DbColDatum, error) {
	rows, err := q.db.QueryContext(ctx, getDatabaseColData, colID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DbColDatum
	for rows.Next() {
		var i DbColDatum
		if err := rows.Scan(
			&i.ID,
			&i.ColID,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
