// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: links.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteExpiredWorkspaceLinks = `-- name: DeleteExpiredWorkspaceLinks :exec
DELETE FROM links
WHERE valid_until < NOW()
`

func (q *Queries) DeleteExpiredWorkspaceLinks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredWorkspaceLinks)
	return err
}

const generateWorkspaceJoinLink = `-- name: GenerateWorkspaceJoinLink :one
INSERT INTO links (
  workspace_id,
  valid_until,
  link,
  role,
  id)
VALUES($1, $2, $3, $4, $5) RETURNING id, workspace_id, valid_until, created_at, updated_at, link, role
`

type GenerateWorkspaceJoinLinkParams struct {
	WorkspaceID uuid.UUID
	ValidUntil  time.Time
	Link        string
	Role        Roles
	ID          uuid.UUID
}

func (q *Queries) GenerateWorkspaceJoinLink(ctx context.Context, arg GenerateWorkspaceJoinLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, generateWorkspaceJoinLink,
		arg.WorkspaceID,
		arg.ValidUntil,
		arg.Link,
		arg.Role,
		arg.ID,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Link,
		&i.Role,
	)
	return i, err
}

const getActiveWorkspaceLinks = `-- name: GetActiveWorkspaceLinks :many
SELECT id, workspace_id, valid_until, created_at, updated_at, link, role FROM links
WHERE workspace_id = $1 AND valid_until > NOW()
ORDER BY valid_until DESC
`

func (q *Queries) GetActiveWorkspaceLinks(ctx context.Context, workspaceID uuid.UUID) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getActiveWorkspaceLinks, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.ValidUntil,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Link,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlink = `-- name: GetAlink :one
SELECT id, workspace_id, valid_until, created_at, updated_at, link, role FROM links
WHERE id = $1
`

func (q *Queries) GetAlink(ctx context.Context, id uuid.UUID) (Link, error) {
	row := q.db.QueryRowContext(ctx, getAlink, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Link,
		&i.Role,
	)
	return i, err
}
