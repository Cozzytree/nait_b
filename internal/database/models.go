// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type Roles string

const (
	RolesMember Roles = "member"
	RolesOwner  Roles = "owner"
	RolesAdmin  Roles = "admin"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles
	Valid bool // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

type TaskPriority string

const (
	TaskPriorityHigh   TaskPriority = "high"
	TaskPriorityLow    TaskPriority = "low"
	TaskPriorityMedium TaskPriority = "medium"
)

func (e *TaskPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskPriority(s)
	case string:
		*e = TaskPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskPriority: %T", src)
	}
	return nil
}

type NullTaskPriority struct {
	TaskPriority TaskPriority
	Valid        bool // Valid is true if TaskPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskPriority) Scan(value interface{}) error {
	if value == nil {
		ns.TaskPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskPriority), nil
}

type TaskStatus string

const (
	TaskStatusCompleted  TaskStatus = "completed"
	TaskStatusInProgress TaskStatus = "in-progress"
	TaskStatusBacklog    TaskStatus = "backlog"
	TaskStatusReview     TaskStatus = "review"
)

func (e *TaskStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskStatus(s)
	case string:
		*e = TaskStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskStatus: %T", src)
	}
	return nil
}

type NullTaskStatus struct {
	TaskStatus TaskStatus
	Valid      bool // Valid is true if TaskStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TaskStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskStatus), nil
}

type Block struct {
	ID        uuid.UUID
	PageID    uuid.UUID
	BlockID   string
	Props     pqtype.NullRawMessage
	Type      sql.NullString
	Content   []string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Comment struct {
	ID            uuid.UUID
	By            uuid.UUID
	ParentComment uuid.NullUUID
	Content       string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

type Page struct {
	ID          uuid.UUID
	WorkspaceID uuid.UUID
	Name        string
	Icon        sql.NullString
	CoverImage  sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Task struct {
	ID          uuid.UUID
	WorkspaceID uuid.UUID
	Assignee    uuid.NullUUID
	CreatedBy   uuid.NullUUID
	Name        string
	Description sql.NullString
	Due         sql.NullTime
	ParentTask  uuid.NullUUID
	Status      NullTaskStatus
	Priority    NullTaskPriority
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type User struct {
	ID        uuid.UUID
	Email     string
	AuthID    string
	Name      string
	Avatar    sql.NullString
	Provider  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Workspace struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type WorkspaceMember struct {
	UserID      uuid.UUID
	WorkspaceID uuid.UUID
	Role        Roles
	CreatedAt   time.Time
	UpdatedAt   time.Time
}
