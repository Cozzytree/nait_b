// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pages.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNewPage = `-- name: CreateNewPage :exec
INSERT INTO pages (name, workspace_id, icon, cover_image)
VALUES ($1, $2, $3, $4)
`

type CreateNewPageParams struct {
	Name        string
	WorkspaceID uuid.UUID
	Icon        sql.NullString
	CoverImage  sql.NullString
}

func (q *Queries) CreateNewPage(ctx context.Context, arg CreateNewPageParams) error {
	_, err := q.db.ExecContext(ctx, createNewPage,
		arg.Name,
		arg.WorkspaceID,
		arg.Icon,
		arg.CoverImage,
	)
	return err
}

const deletePage = `-- name: DeletePage :exec
DELETE FROM pages WHERE id = $1
`

func (q *Queries) DeletePage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePage, id)
	return err
}

const getPageByID = `-- name: GetPageByID :one
SELECT id, workspace_id, name, icon, cover_image, created_at, updated_at FROM pages
WHERE id = $1
`

func (q *Queries) GetPageByID(ctx context.Context, id uuid.UUID) (Page, error) {
	row := q.db.QueryRowContext(ctx, getPageByID, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.Icon,
		&i.CoverImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspacePages = `-- name: GetWorkspacePages :many
SELECT id, name, workspace_id FROM pages
WHERE workspace_id = $1
ORDER BY created_at DESC
`

type GetWorkspacePagesRow struct {
	ID          uuid.UUID
	Name        string
	WorkspaceID uuid.UUID
}

func (q *Queries) GetWorkspacePages(ctx context.Context, workspaceID uuid.UUID) ([]GetWorkspacePagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspacePages, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspacePagesRow
	for rows.Next() {
		var i GetWorkspacePagesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.WorkspaceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
