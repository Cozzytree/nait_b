// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNewTask = `-- name: CreateNewTask :exec
INSERT INTO
  tasks (
    workspace_id,
    assignee,
    created_by,
    name,
    description,
    due,
    parent_task,
    status,
    priority
  )
VALUES
($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateNewTaskParams struct {
	WorkspaceID uuid.UUID
	Assignee    uuid.NullUUID
	CreatedBy   uuid.NullUUID
	Name        string
	Description sql.NullString
	Due         sql.NullTime
	ParentTask  uuid.NullUUID
	Status      NullTaskStatus
	Priority    NullTaskPriority
}

func (q *Queries) CreateNewTask(ctx context.Context, arg CreateNewTaskParams) error {
	_, err := q.db.ExecContext(ctx, createNewTask,
		arg.WorkspaceID,
		arg.Assignee,
		arg.CreatedBy,
		arg.Name,
		arg.Description,
		arg.Due,
		arg.ParentTask,
		arg.Status,
		arg.Priority,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getChildTasks = `-- name: GetChildTasks :many
SELECT id, workspace_id, assignee, created_by, name, description, due, parent_task, status, priority, created_at, updated_at FROM tasks
WHERE parent_task = $1
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type GetChildTasksParams struct {
	ParentTask uuid.NullUUID
	Offset     int32
	Limit      int32
}

func (q *Queries) GetChildTasks(ctx context.Context, arg GetChildTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getChildTasks, arg.ParentTask, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Assignee,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.Due,
			&i.ParentTask,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, workspace_id, assignee, created_by, name, description, due, parent_task, status, priority, created_at, updated_at FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Assignee,
		&i.CreatedBy,
		&i.Name,
		&i.Description,
		&i.Due,
		&i.ParentTask,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspaceCompletedTasks = `-- name: GetWorkspaceCompletedTasks :many
SELECT id, workspace_id, assignee, created_by, name, description, due, parent_task, status, priority, created_at, updated_at FROM tasks
WHERE workspace_id = $1 AND status = 'completed'
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type GetWorkspaceCompletedTasksParams struct {
	WorkspaceID uuid.UUID
	Offset      int32
	Limit       int32
}

func (q *Queries) GetWorkspaceCompletedTasks(ctx context.Context, arg GetWorkspaceCompletedTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceCompletedTasks, arg.WorkspaceID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Assignee,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.Due,
			&i.ParentTask,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceDueTasks = `-- name: GetWorkspaceDueTasks :many
SELECT id, workspace_id, assignee, created_by, name, description, due, parent_task, status, priority, created_at, updated_at FROM tasks
WHERE due > CURRENT_DATE
ORDER BY created_at DESC
OFFSET $1
LIMIT $2
`

type GetWorkspaceDueTasksParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetWorkspaceDueTasks(ctx context.Context, arg GetWorkspaceDueTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceDueTasks, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Assignee,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.Due,
			&i.ParentTask,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceTaskPriorityCount = `-- name: GetWorkspaceTaskPriorityCount :one
SELECT COUNT(id) FROM tasks
WHERE priority = $1 AND workspace_id = $2
`

type GetWorkspaceTaskPriorityCountParams struct {
	Priority    NullTaskPriority
	WorkspaceID uuid.UUID
}

func (q *Queries) GetWorkspaceTaskPriorityCount(ctx context.Context, arg GetWorkspaceTaskPriorityCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceTaskPriorityCount, arg.Priority, arg.WorkspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkspaceTaskStatusCount = `-- name: GetWorkspaceTaskStatusCount :one
SELECT COUNT(id) FROM tasks
WHERE status = $1 AND workspace_id = $2
`

type GetWorkspaceTaskStatusCountParams struct {
	Status      NullTaskStatus
	WorkspaceID uuid.UUID
}

func (q *Queries) GetWorkspaceTaskStatusCount(ctx context.Context, arg GetWorkspaceTaskStatusCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceTaskStatusCount, arg.Status, arg.WorkspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkspaceTasks = `-- name: GetWorkspaceTasks :many
SELECT id, workspace_id, assignee, created_by, name, description, due, parent_task, status, priority, created_at, updated_at FROM tasks
WHERE workspace_id = $1
AND status != 'completed'
AND parent_task IS NULL
ORDER BY created_at DESC
OFFSET $2
LIMIT $3
`

type GetWorkspaceTasksParams struct {
	WorkspaceID uuid.UUID
	Offset      int32
	Limit       int32
}

func (q *Queries) GetWorkspaceTasks(ctx context.Context, arg GetWorkspaceTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceTasks, arg.WorkspaceID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Assignee,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.Due,
			&i.ParentTask,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceTotalCountTask = `-- name: GetWorkspaceTotalCountTask :one
SELECT COUNT(id) FROM tasks
WHERE workspace_id = $1
`

func (q *Queries) GetWorkspaceTotalCountTask(ctx context.Context, workspaceID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceTotalCountTask, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkspaceUserAssignedTasks = `-- name: GetWorkspaceUserAssignedTasks :many
SELECT id, workspace_id, assignee, created_by, name, description, due, parent_task, status, priority, created_at, updated_at FROM tasks
WHERE assignee = $1 AND workspace_id = $2
ORDER BY created_at DESC
OFFSET $3
LIMIT $4
`

type GetWorkspaceUserAssignedTasksParams struct {
	Assignee    uuid.NullUUID
	WorkspaceID uuid.UUID
	Offset      int32
	Limit       int32
}

func (q *Queries) GetWorkspaceUserAssignedTasks(ctx context.Context, arg GetWorkspaceUserAssignedTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceUserAssignedTasks,
		arg.Assignee,
		arg.WorkspaceID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Assignee,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.Due,
			&i.ParentTask,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUserCreatedTasks = `-- name: GetWorkspaceUserCreatedTasks :many
SELECT id, workspace_id, assignee, created_by, name, description, due, parent_task, status, priority, created_at, updated_at FROM tasks
WHERE created_by = $1 AND workspace_id = $2
ORDER BY created_at DESC
OFFSET $3
LIMIT $4
`

type GetWorkspaceUserCreatedTasksParams struct {
	CreatedBy   uuid.NullUUID
	WorkspaceID uuid.UUID
	Offset      int32
	Limit       int32
}

func (q *Queries) GetWorkspaceUserCreatedTasks(ctx context.Context, arg GetWorkspaceUserCreatedTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceUserCreatedTasks,
		arg.CreatedBy,
		arg.WorkspaceID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Assignee,
			&i.CreatedBy,
			&i.Name,
			&i.Description,
			&i.Due,
			&i.ParentTask,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskDescription = `-- name: UpdateTaskDescription :exec
UPDATE tasks
SET description = $1,
updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateTaskDescriptionParams struct {
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateTaskDescription(ctx context.Context, arg UpdateTaskDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskDescription, arg.Description, arg.ID)
	return err
}

const updateTaskDue = `-- name: UpdateTaskDue :exec
UPDATE tasks
SET due = $1,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $2 AND status != 'completed'
`

type UpdateTaskDueParams struct {
	Due sql.NullTime
	ID  uuid.UUID
}

func (q *Queries) UpdateTaskDue(ctx context.Context, arg UpdateTaskDueParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskDue, arg.Due, arg.ID)
	return err
}

const updateTaskName = `-- name: UpdateTaskName :exec
UPDATE tasks
SET name = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateTaskNameParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateTaskName(ctx context.Context, arg UpdateTaskNameParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskName, arg.Name, arg.ID)
	return err
}

const updateTaskPriority = `-- name: UpdateTaskPriority :exec
UPDATE tasks
SET priority = $1,
updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateTaskPriorityParams struct {
	Priority NullTaskPriority
	ID       uuid.UUID
}

func (q *Queries) UpdateTaskPriority(ctx context.Context, arg UpdateTaskPriorityParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskPriority, arg.Priority, arg.ID)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateTaskStatusParams struct {
	Status NullTaskStatus
	ID     uuid.UUID
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, arg.Status, arg.ID)
	return err
}
