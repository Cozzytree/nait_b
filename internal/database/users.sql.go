// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, auth_id, avatar, provider)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateUserParams struct {
	Name     string
	Email    string
	AuthID   string
	Avatar   sql.NullString
	Provider string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.AuthID,
		arg.Avatar,
		arg.Provider,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, auth_id, name, avatar, provider, created_at, updated_at FROM users
WHERE auth_id = $1
`

func (q *Queries) GetUser(ctx context.Context, authID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, authID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AuthID,
		&i.Name,
		&i.Avatar,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
