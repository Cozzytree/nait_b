// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workspaces.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createNewWorkspace = `-- name: CreateNewWorkspace :one
INSERT INTO workspaces (name, user_id)
VALUES ($1, $2) RETURNING id
`

type CreateNewWorkspaceParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateNewWorkspace(ctx context.Context, arg CreateNewWorkspaceParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createNewWorkspace, arg.Name, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createNewWorkspaceMember = `-- name: CreateNewWorkspaceMember :exec
INSERT INTO workspace_members (user_id, workspace_id, role)
VALUES ($1, $2, $3)
`

type CreateNewWorkspaceMemberParams struct {
	UserID      uuid.UUID
	WorkspaceID uuid.UUID
	Role        Roles
}

func (q *Queries) CreateNewWorkspaceMember(ctx context.Context, arg CreateNewWorkspaceMemberParams) error {
	_, err := q.db.ExecContext(ctx, createNewWorkspaceMember, arg.UserID, arg.WorkspaceID, arg.Role)
	return err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces WHERE id = $1 AND user_id = $2
`

type DeleteWorkspaceParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteWorkspace(ctx context.Context, arg DeleteWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorkspace, arg.ID, arg.UserID)
	return err
}

const getUserWorkspaces = `-- name: GetUserWorkspaces :many
SELECT id, user_id, name, created_at, updated_at FROM workspaces
where user_id = $1
`

func (q *Queries) GetUserWorkspaces(ctx context.Context, userID uuid.UUID) ([]Workspace, error) {
	rows, err := q.db.QueryContext(ctx, getUserWorkspaces, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, user_id, name, created_at, updated_at FROM workspaces WHERE id = $1 AND user_id = $2
`

type GetWorkspaceByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetWorkspaceByID(ctx context.Context, arg GetWorkspaceByIDParams) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceByID, arg.ID, arg.UserID)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspaceMembers = `-- name: GetWorkspaceMembers :many
SELECT mem.user_id, mem.workspace_id, mem.role, mem.created_at, mem.updated_at,
jsonb_build_object(
     'user_id', u.id,
     'username', u.name,
     'avatar', u.avatar,
     'email', u.email
 ) AS user
FROM workspace_members AS mem
LEFT JOIN users as u ON mem.user_id = u.id
WHERE workspace_id = $1
ORDER BY mem.created_at DESC
`

type GetWorkspaceMembersRow struct {
	UserID      uuid.UUID
	WorkspaceID uuid.UUID
	Role        Roles
	CreatedAt   time.Time
	UpdatedAt   time.Time
	User        json.RawMessage
}

func (q *Queries) GetWorkspaceMembers(ctx context.Context, workspaceID uuid.UUID) ([]GetWorkspaceMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceMembers, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspaceMembersRow
	for rows.Next() {
		var i GetWorkspaceMembersRow
		if err := rows.Scan(
			&i.UserID,
			&i.WorkspaceID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMemberFromWorkspace = `-- name: RemoveMemberFromWorkspace :exec
DELETE FROM workspace_members
WHERE workspace_id = $1 AND user_id = $2
`

type RemoveMemberFromWorkspaceParams struct {
	WorkspaceID uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) RemoveMemberFromWorkspace(ctx context.Context, arg RemoveMemberFromWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, removeMemberFromWorkspace, arg.WorkspaceID, arg.UserID)
	return err
}
